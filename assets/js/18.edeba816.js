(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{345:function(_,v,t){"use strict";t.r(v);var e=t(4),s=Object(e.a)({},function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",[_._v("一个新技术的出现必定是为了解决某种问题的，那么 HTTPS 解决了 HTTP 的什么问题呢？")])]),_._v(" "),t("h2",{attrs:{id:"https-为什么会出现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#https-为什么会出现","aria-hidden":"true"}},[_._v("#")]),_._v(" HTTPS 为什么会出现")]),_._v(" "),t("p",[_._v("一个简单的回答可能会是 HTTP 它不安全。由于 HTTP 天生明文传输的特性，在 HTTP 的传输过程中，任何人都有可能从中截获、修改或者伪造请求发送，所以可以认为 HTTP 是不安全的；在 HTTP 的传输过程中不会验证通信方的身份，因此 HTTP 信息交换的双方可能会遭到伪装，也就是"),t("code",[_._v("没有用户验证")]),_._v("；在 HTTP 的传输过程中，接收方和发送方"),t("code",[_._v("并不会验证报文的完整性")]),_._v("，综上，为了解决上述问题"),t("code",[_._v("HTTPS")]),_._v("应用而生。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https1.jpg",alt:"https"}})]),_._v(" "),t("h3",{attrs:{id:"什么是-https"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-https","aria-hidden":"true"}},[_._v("#")]),_._v(" 什么是 HTTPS")]),_._v(" "),t("p",[_._v("你还记得 HTTP 是怎么定义的吗？HTTP 是一种 "),t("code",[_._v("超文本传输协议(Hypertext Transfer Protocol)")]),_._v(" 协议，"),t("strong",[_._v("它是一个在计算机世界里专门在两点之间传输文字、图片、音频、视频等超文本数据的约定和规范")]),_._v("，那么我们看一下 "),t("code",[_._v("HTTPS")]),_._v(" 是如何定义的。")]),_._v(" "),t("p",[_._v("HTTPS 的全称是 "),t("code",[_._v("Hypertext Transfer Protocol Secure")]),_._v("，它用来在计算机网络上的两个端系统之间进行"),t("code",[_._v("安全的交换信息(secure communication)")]),_._v("，它相当于在 HTTP 的基础上加了一个 "),t("code",[_._v("Secure")]),_._v(" 安全的词眼，那么我们可以给出一个 HTTPS 的定义："),t("strong",[_._v("HTTPS 是一个在计算机世界里专门在两点之间安全的传输文字、图片、音频、视频等超文本数据的约定和规范")]),_._v("。")]),_._v(" "),t("p",[_._v("HTTPS 是 HTTP 协议的一种扩展，它本身并不保证传输的安全性，那么谁来保证安全性呢？在 HTTPS 中，使用"),t("code",[_._v("传输层安全性(TLS)")]),_._v("或"),t("code",[_._v("安全套接字层(SSL)")]),_._v("对通信协议进行加密。也就是 "),t("code",[_._v("HTTP")]),_._v(" + "),t("code",[_._v("SSL(TLS)")]),_._v(" = "),t("code",[_._v("HTTPS")]),_._v("。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https2.jpg",alt:"https"}})]),_._v(" "),t("h3",{attrs:{id:"https-做了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#https-做了什么","aria-hidden":"true"}},[_._v("#")]),_._v(" HTTPS 做了什么")]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[_._v("HTTPS 协议提供了三个关键的指标")])]),_._v(" "),t("ul",[t("li",[t("p",[t("strong",[_._v("加密(Encryption)")]),_._v("：HTTPS 通过对数据加密来使其免受窃听者对数据的监听，这就意味着当用户在浏览网站时，没有人能够监听他和网站之间的信息交换，或者跟踪用户的活动，访问记录等，从而窃取用户信息。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("数据一致性(Data integrity)")]),_._v("：数据在传输的过程中不会被窃听者所修改，用户发送的数据会完整的传输到服务端，保证用户发的是什么，服务器接收的就是什么。")])]),_._v(" "),t("li",[t("p",[t("strong",[_._v("身份认证(Authentication)")]),_._v("，是指确认对方的真实身份，它可以防止中间人攻击并建立用户信任。保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方。")])])]),_._v(" "),t("p",[_._v("有了上面三个关键指标的保证，用户就可以和服务器进行安全的交换信息了。那么，既然你说了 HTTPS 的种种好处，那么我怎么知道网站是用 HTTPS 的还是 HTTP 的呢？给你两幅图应该就可以解释了。\n"),t("img",{attrs:{src:"/images/https/https3.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("HTTPS 协议其实非常简单，RFC 文档很小，只有短短的 7 页，里面规定了新的协议名，"),t("strong",[_._v("默认端口号443")]),_._v("，至于其他的应答模式、报文结构、请求方法、URI、头字段、连接管理等等都完全沿用 HTTP，没有任何新的东西。")]),_._v(" "),t("p",[_._v("也就是说，除了协议名称和默认端口号外（"),t("strong",[_._v("HTTP 默认端口 80")]),_._v("），HTTPS 协议在语法、语义上和 HTTP 一样，HTTP 有的，HTTPS 也照单全收。那么，HTTPS 如何做到 HTTP 所不能做到的安全性呢？关键在于这个 "),t("code",[_._v("S")]),_._v(" 也就是 "),t("code",[_._v("SSL/TLS")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"什么是-ssl-tls"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ssl-tls","aria-hidden":"true"}},[_._v("#")]),_._v(" 什么是 SSL/TLS")]),_._v(" "),t("h3",{attrs:{id:"认识-ssl-tls"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认识-ssl-tls","aria-hidden":"true"}},[_._v("#")]),_._v(" 认识 SSL/TLS")]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[t("code",[_._v("TLS(Transport Layer Security)")]),_._v(" 是 "),t("code",[_._v("SSL(Secure Socket Layer)")]),_._v(" 的后续版本，它们是用于在互联网两台计算机之间用于"),t("strong",[_._v("身份验证")]),_._v("和"),t("strong",[_._v("加密")]),_._v("的一种协议。")])]),_._v(" "),t("p",[_._v("我们都知道一些在线业务"),t("code",[_._v("（比如在线支付）")]),_._v("最重要的一个步骤是创建一个值得信赖的交易环境，能够让客户安心的进行交易，SSL/TLS 就保证了这一点，SSL/TLS 通过将称为"),t("code",[_._v("X.509 证书")]),_._v("的数字文档将网站和公司的实体信息绑定到"),t("code",[_._v("加密密钥")]),_._v("来进行工作。每一个"),t("code",[_._v("密钥对(key pairs)")]),_._v("都有一个 "),t("code",[_._v("私有密钥(private key)")]),_._v("和"),t("code",[_._v("公有密钥(public key)")]),_._v("，私有密钥是独有的，一般位于服务器上，用于解密由公共密钥加密过的信息；公有密钥是公有的，与服务器进行交互的每个人都可以持有公有密钥，用公钥加密的信息只能由私有密钥来解密。")]),_._v(" "),t("h3",{attrs:{id:"什么是-x-509"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-x-509","aria-hidden":"true"}},[_._v("#")]),_._v(" 什么是 X.509")]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[t("code",[_._v("X.509")]),_._v(" 是公开密钥证书的标准格式，这个文档将加密密钥与（个人或组织）进行安全的关联。")])]),_._v(" "),t("p",[t("strong",[_._v("X.509 主要应用如下:")])]),_._v(" "),t("ul",[t("li",[_._v("SSL/TLS 和 HTTPS 用于经过身份验证和加密的 Web 浏览")]),_._v(" "),t("li",[_._v("通过 "),t("a",{attrs:{href:"https://www.ssl.com/article/sending-secure-email-with-s-mime/",target:"_blank",rel:"noopener noreferrer"}},[_._v("S/MIME"),t("OutboundLink")],1),_._v(" 协议签名和加密的电子邮件")]),_._v(" "),t("li",[_._v("代码签名：它指的是使用数字证书对软件应用程序进行签名以安全分发和安装的过程。\n"),t("img",{attrs:{src:"/images/https/https4.jpg",alt:"https"}}),_._v("\n通过使用由知名公共证书颁发机构"),t("code",[_._v("（例如SSL.com）")]),_._v("颁发的证书对软件进行数字签名，开发人员可以向最终用户保证他们希望安装的软件是由已知且受信任的开发人员发布；并且签名后未被篡改或损害。")]),_._v(" "),t("li",[_._v("还可用于文档签名")]),_._v(" "),t("li",[_._v("还可用于客户端认证")]),_._v(" "),t("li",[_._v("政府签发的电子身份证")])]),_._v(" "),t("p",[_._v("我们后面还会讨论。")]),_._v(" "),t("h3",{attrs:{id:"https-的内核是-http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#https-的内核是-http","aria-hidden":"true"}},[_._v("#")]),_._v(" HTTPS 的内核是 HTTP")]),_._v(" "),t("p",[_._v("HTTPS 并不是一项新的应用层协议，只是 HTTP 通信接口部分由 "),t("code",[_._v("SSL")]),_._v(" 和 "),t("code",[_._v("TLS")]),_._v(" 替代而已。通常情况下，HTTP 会先直接和 TCP 进行通信。在使用 SSL 的 HTTPS 后，则会先演变为和 SSL 进行通信，然后再由 SSL 和 TCP 进行通信。也就是说，"),t("strong",[_._v("HTTPS 就是身披了一层 SSL 的 HTTP")]),_._v("。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https5.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("SSL 是一个独立的协议，不只有 HTTP 可以使用，其他应用层协议也可以使用，比如 SMTP(电子邮件协议)、Telnet(远程登录协议) 等都可以使用。")]),_._v(" "),t("h2",{attrs:{id:"探究-https"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#探究-https","aria-hidden":"true"}},[_._v("#")]),_._v(" 探究 HTTPS")]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[_._v("SSL 即安全套接字层，它在 OSI 七层网络模型中处于第五层，SSL 在 1999 年被 IETF(互联网工程组)更名为 TLS ，即传输安全层，直到现在，TLS 一共出现过三个版本，1.1、1.2 和 1.3 。\n目前最广泛使用的是 1.2，所以接下来的探讨都是基于 TLS 1.2 的版本上的。")])]),_._v(" "),t("p",[_._v("TLS 用于两个通信应用程序之间提供保密性和数据完整性。TLS 由"),t("strong",[_._v("记录协议、握手协议、警告协议、变更密码规范协议、扩展协议")]),_._v("等几个子协议组成，综合使用了"),t("strong",[_._v("对称加密")]),_._v("、"),t("strong",[_._v("非对称加密")]),_._v("、"),t("strong",[_._v("身份认证")]),_._v("等许多密码学前沿技术（如果你觉得一项技术很简单，那你只是没有学到位，任何技术都是有美感的，牛逼的人只是欣赏，并不是贬低）。")]),_._v(" "),t("p",[_._v("下面举一个 TLS 例子来看一下 TLS 的结构")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("ECDHE-ECDSA-AES256-GCM-SHA384\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("p",[_._v("这是啥意思呢？我刚开始看也有点懵啊，但其实是有套路的，因为 TLS 的密码套件比较规范，基本格式就是 "),t("strong",[_._v("密钥交换算法 - 签名算法 - 对称加密算法 - 摘要算法")]),_._v(" 组成的一个密码串，有时候还有"),t("code",[_._v("分组模式")]),_._v("，我们先来看一下这个例子是什么意思")]),_._v(" "),t("p",[_._v("使用"),t("code",[_._v("ECDHE")]),_._v("进行密钥交换，使用"),t("code",[_._v("ECDSA")]),_._v("进行签名和认证，然后使用"),t("code",[_._v("AES")]),_._v("作为对称加密算法，密钥的长度是"),t("code",[_._v("256")]),_._v("位，使用"),t("code",[_._v("GCM")]),_._v("作为分组模式，最后使用"),t("code",[_._v("SHA384")]),_._v("作为摘要算法。")]),_._v(" "),t("p",[_._v("TLS 在根本上使用"),t("strong",[_._v("对称加密")]),_._v("和"),t("strong",[_._v("非对称加密")]),_._v("两种形式。")]),_._v(" "),t("h3",{attrs:{id:"对称加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对称加密","aria-hidden":"true"}},[_._v("#")]),_._v(" 对称加密")]),_._v(" "),t("p",[_._v("在了解对称加密前，我们先来了解一下"),t("em",[_._v("密码学")]),_._v("的东西，在密码学中，有几个概念："),t("code",[_._v("明文")]),_._v("、"),t("code",[_._v("密文")]),_._v("、"),t("code",[_._v("加密")]),_._v("、"),t("code",[_._v("解密")])]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("明文(Plaintext)")]),_._v(" ：一般认为明文是有意义的字符或者比特集，或者是通过某种公开编码就能获得的消息。明文通常用 m 或 p 表示")]),_._v(" "),t("li",[t("strong",[_._v("密文(Ciphertext)")]),_._v(" ：对明文进行某种加密后就变成了密文")]),_._v(" "),t("li",[t("strong",[_._v("加密(Encrypt)")]),_._v(" ：把原始的信息（明文）转换为密文的信息变换过程")]),_._v(" "),t("li",[t("strong",[_._v("解密(Decrypt)")]),_._v(" ：把已经加密的信息恢复成明文的过程。")])]),_._v(" "),t("p",[t("strong",[_._v("对称加密(Symmetrical Encryption)")]),_._v(" 顾名思义就是指加密和解密时使用的密钥都是同样的密钥。只要保证了密钥的安全性，那么整个通信过程也就是具有了机密性。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https6.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("TLS 里面有比较多的加密算法可供使用，比如 "),t("code",[_._v("DES")]),_._v("、"),t("code",[_._v("3DES")]),_._v("、"),t("code",[_._v("AES")]),_._v("、"),t("code",[_._v("ChaCha20")]),_._v("、"),t("code",[_._v("TDEA")]),_._v("、"),t("code",[_._v("Blowfish")]),_._v("、"),t("code",[_._v("RC2")]),_._v("、"),t("code",[_._v("RC4")]),_._v("、"),t("code",[_._v("RC5")]),_._v("、"),t("code",[_._v("IDEA")]),_._v("、"),t("code",[_._v("SKIPJACK")]),_._v(" 等。目前最常用的是"),t("code",[_._v("AES-128")]),_._v(", "),t("code",[_._v("AES-192")]),_._v("、"),t("code",[_._v("AES-256")]),_._v(" 和 "),t("code",[_._v("ChaCha20")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("DES")]),_._v(" 的全称是 "),t("code",[_._v("Data Encryption Standard(数据加密标准)")]),_._v(" ，它是用于数字数据加密的对称密钥算法。尽管其 56 位的短密钥长度使它对于现代应用程序来说太不安全了，但它在加密技术的发展中具有很大的影响力。")]),_._v(" "),t("p",[t("code",[_._v("3DES")]),_._v(" 是从原始"),t("code",[_._v("数据加密标准（DES）")]),_._v("衍生过来的加密算法，它在 90 年代后变得很重要，但是后面由于更加高级的算法出现，3DES 变得不再重要。")]),_._v(" "),t("p",[t("code",[_._v("AES-128")]),_._v(", "),t("code",[_._v("AES-192")]),_._v(" 和 "),t("code",[_._v("AES-256")]),_._v(" 都是属于 "),t("code",[_._v("AES")]),_._v(" ，AES 的全称是"),t("code",[_._v("Advanced Encryption Standard(高级加密标准)")]),_._v("，它是 DES 算法的替代者，安全强度很高，性能也很好，是应用最广泛的对称加密算法。")]),_._v(" "),t("p",[t("code",[_._v("ChaCha20")]),_._v(" 是 Google 设计的另一种加密算法，"),t("strong",[_._v("密钥长度固定为 256 位")]),_._v("，纯软件运行性能要超过 AES，曾经在移动客户端上比较流行，但 "),t("code",[_._v("ARMv8")]),_._v(" 之后也加入了 AES 硬件优化，所以现在不再具有明显的优势，但仍然算得上是一个不错算法。")]),_._v(" "),t("p",[_._v("（其他可自行搜索）")]),_._v(" "),t("h4",{attrs:{id:"加密分组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加密分组","aria-hidden":"true"}},[_._v("#")]),_._v(" 加密分组")]),_._v(" "),t("p",[_._v("对称加密算法还有一个"),t("code",[_._v("分组模式")]),_._v("的概念，对于"),t("code",[_._v("GCM")]),_._v("分组模式，只有和 "),t("code",[_._v("AES")]),_._v("，"),t("code",[_._v("CAMELLIA")]),_._v("和"),t("code",[_._v("ARIA")]),_._v("搭配使用，而"),t("code",[_._v("AES")]),_._v("显然是最受欢迎和部署最广泛的选择，它可以让算法用固定长度的密钥加密任意长度的明文。")]),_._v(" "),t("p",[_._v("最早有 "),t("code",[_._v("ECB")]),_._v("、"),t("code",[_._v("CBC")]),_._v("、"),t("code",[_._v("CFB")]),_._v("、"),t("code",[_._v("OFB")]),_._v(" 等几种分组模式，但都陆续被发现有安全漏洞，所以现在基本都不怎么用了。最新的分组模式被称为 "),t("strong",[_._v("AEAD（Authenticated Encryption with Associated Data）")]),_._v("，在加密的同时增加了认证的功能，常用的是 "),t("code",[_._v("GCM")]),_._v("、"),t("code",[_._v("CCM")]),_._v(" 和 "),t("code",[_._v("Poly1305")]),_._v("。")]),_._v(" "),t("p",[_._v("比如 "),t("code",[_._v("ECDHE_ECDSA_AES128_GCM_SHA256")]),_._v(" ，表示的是具有 128 位密钥， "),t("code",[_._v("AES256")]),_._v(" 将表示 256 位密钥。"),t("code",[_._v("GCM")]),_._v(" 表示具有 128 位块的分组密码的现代认证的关联数据加密（AEAD）操作模式。")]),_._v(" "),t("p",[_._v("我们上面谈到了对称加密，对称加密的加密方和解密方都使用同一个密钥，也就是说，加密方必须对原始数据进行加密，然后再把密钥交给解密方进行解密，然后才能解密数据，这就会造成什么问题？这就好比《小兵张嘎》去送信（信已经被加密过），但是嘎子还拿着解密的密码，那嘎子要是在途中被鬼子发现了，那这信可就是被完全的暴露了。所以，对称加密存在风险。")]),_._v(" "),t("h3",{attrs:{id:"非对称加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密","aria-hidden":"true"}},[_._v("#")]),_._v(" 非对称加密")]),_._v(" "),t("p",[t("code",[_._v("非对称加密(Asymmetrical Encryption)")]),_._v(" 也被称为"),t("code",[_._v("公钥加密")]),_._v("，相对于对称加密来说，非对称加密是一种新的改良加密方式。密钥通过网络传输交换，它能够确保即使密钥被拦截，也不会暴露数据信息。非对称加密中有两个密钥，一个是公钥，一个是私钥，公钥进行加密，私钥进行解密。公开密钥可供任何人使用，私钥只有你自己能够知道。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https7.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("使用公钥加密的文本只能使用私钥解密，同时，使用私钥加密的文本也可以使用公钥解密。公钥不需要具有安全性，因为公钥需要在网络间进行传输，非对称加密可以解决密钥交换的问题。网站保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。")]),_._v(" "),t("p",[_._v("非对称加密算法的设计要比对称算法难得多（我们不会探讨具体的加密方式），常见的比如 DH、DSA、RSA、ECC 等。")]),_._v(" "),t("p",[_._v("其中 "),t("code",[_._v("RSA")]),_._v(" 加密算法是最重要的、最出名的一个了。例如 "),t("code",[_._v("DHE_RSA_CAMELLIA128_GCM_SHA256")]),_._v("。它的安全性基于 "),t("code",[_._v("整数分解")]),_._v("，使用两个超大素数的乘积作为生成密钥的材料，想要从公钥推算出私钥是非常困难的。")]),_._v(" "),t("p",[t("code",[_._v("ECC（Elliptic Curve Cryptography）")]),_._v("也是非对称加密算法的一种，它基于"),t("code",[_._v("椭圆曲线离散对数")]),_._v("的数学难题，使用特定的曲线方程和基点生成公钥和私钥， ECDHE 用于密钥交换，ECDSA 用于数字签名。")]),_._v(" "),t("p",[_._v("TLS 是使用对称加密和非对称加密 的混合加密方式来实现机密性。")]),_._v(" "),t("h3",{attrs:{id:"混合加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混合加密","aria-hidden":"true"}},[_._v("#")]),_._v(" 混合加密")]),_._v(" "),t("p",[t("code",[_._v("RSA")]),_._v(" 的运算速度非常慢，而 "),t("code",[_._v("AES")]),_._v(" 的加密速度比较快，而 "),t("code",[_._v("TLS")]),_._v(" 正是使用了这种混合加密方式。在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE ，首先解决密钥交换的问题。然后用随机数产生对称算法使用的"),t("code",[_._v("会话密钥（session key）")]),_._v("，再用公钥加密。对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https8.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("现在我们使用混合加密的方式实现了机密性，是不是就能够安全的传输数据了呢？还不够，在机密性的基础上还要加上完整性、身份认证的特性，才能实现真正的安全。而实现完整性的主要手段是 "),t("code",[_._v("摘要算法(Digest Algorithm)")])]),_._v(" "),t("h3",{attrs:{id:"摘要算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#摘要算法","aria-hidden":"true"}},[_._v("#")]),_._v(" 摘要算法")]),_._v(" "),t("p",[_._v("如何实现完整性呢？在 "),t("code",[_._v("TLS")]),_._v(" 中，实现完整性的手段主要是 "),t("code",[_._v("摘要算法(Digest Algorithm)")]),_._v("。摘要算法你不清楚的话，MD5 你应该清楚，MD5 的全称是 "),t("code",[_._v("Message Digest Algorithm 5")]),_._v("，它是属于"),t("code",[_._v("密码哈希算法(cryptographic hash algorithm)")]),_._v("的一种，MD5 可用于从任意长度的字符串创建 128 位字符串值。尽管 "),t("code",[_._v("MD5")]),_._v(" 存在不安全因素，但是仍然沿用至今。MD5 最常用于验证文件的完整性。但是，它还用于其他安全协议和应用程序中，例如 SSH、SSL 和 IPSec。一些应用程序通过向明文加盐值或多次应用哈希函数来增强 "),t("code",[_._v("MD5")]),_._v(" 算法。")]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[_._v("什么是加盐？在密码学中，盐就是一项随机数据，用作哈希数据，密码或密码的单向函数的附加输入。盐用于保护存储中的密码。例如")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https9.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("什么是单向？就是在说这种算法没有密钥可以进行解密，只能进行单向加密，加密后的数据无法解密，不能逆推出原文。")])]),_._v(" "),t("p",[_._v("我们再回到摘要算法的讨论上来，其实你可以把摘要算法理解成一种特殊的压缩算法，它能够把任意长度的数据压缩成一种固定长度的字符串，这就好像是给数据加了一把锁。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https10.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("除了常用的 MD5 是加密算法外，"),t("code",[_._v("SHA-1(Secure Hash Algorithm 1)")]),_._v(" 也是一种常用的加密算法，不过 "),t("code",[_._v("SHA-1")]),_._v(" 也是不安全的加密算法，在 "),t("code",[_._v("TLS")]),_._v(" 里面被禁止使用。目前 "),t("code",[_._v("TLS")]),_._v(" 推荐使用的是 "),t("code",[_._v("SHA-1")]),_._v(" 的后继者："),t("code",[_._v("SHA-2")]),_._v("。")]),_._v(" "),t("p",[t("code",[_._v("SHA-2")]),_._v(" 的全称是Secure Hash Algorithm 2 ，它在 2001 年被推出，它在 "),t("code",[_._v("SHA-1")]),_._v(" 的基础上做了重大的修改，"),t("code",[_._v("SHA-2")]),_._v(" 系列包含六个哈希函数，其摘要（哈希值）分别为 "),t("code",[_._v("224")]),_._v("、"),t("code",[_._v("256")]),_._v("、"),t("code",[_._v("384")]),_._v(" 或 "),t("code",[_._v("512")]),_._v(" 位："),t("code",[_._v("SHA-224")]),_._v(", "),t("code",[_._v("SHA-256")]),_._v(", "),t("code",[_._v("SHA-384")]),_._v(", "),t("code",[_._v("SHA-512")]),_._v("。分别能够生成 "),t("code",[_._v("28 字节")]),_._v("、"),t("code",[_._v("32 字节")]),_._v("、"),t("code",[_._v("48 字节")]),_._v("、"),t("code",[_._v("64 字节")]),_._v("的摘要。")]),_._v(" "),t("p",[_._v("有了 "),t("code",[_._v("SHA-2")]),_._v(" 的保护，就能够实现数据的完整性，哪怕你在文件中改变一个标点符号，增加一个空格，生成的文件摘要也会完全不同，不过 "),t("code",[_._v("SHA-2")]),_._v(" 是基于明文的加密方式，还是不够安全，那应该用什么呢？")]),_._v(" "),t("p",[_._v("安全性更高的加密方式是使用 "),t("code",[_._v("HMAC")]),_._v("，在理解什么是 "),t("code",[_._v("HMAC")]),_._v(" 前，你需要先知道一下什么是 MAC。")]),_._v(" "),t("p",[t("code",[_._v("MAC")]),_._v(" 的全称是"),t("code",[_._v("message authentication code")]),_._v("，它通过 "),t("code",[_._v("MAC 算法")]),_._v("从消息和密钥生成，"),t("code",[_._v("MAC")]),_._v(" 值允许验证者（也拥有秘密密钥）检测到消息内容的任何更改，从而保护了消息的数据完整性。")]),_._v(" "),t("p",[t("code",[_._v("HMAC")]),_._v(" 是 "),t("code",[_._v("MAC")]),_._v(" 更进一步的拓展，它是使用 "),t("code",[_._v("MAC 值")]),_._v(" + "),t("code",[_._v("Hash 值")]),_._v("的组合方式，HMAC 的计算中可以使用任何加密哈希函数，例如 "),t("code",[_._v("SHA-256")]),_._v(" 等。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https11.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("现在我们又解决了完整性的问题，那么就只剩下一个问题了，那就是认证，认证怎么做的呢？我们再向服务器发送数据的过程中，黑客（攻击者）有可能伪装成任何一方来窃取信息。它可以伪装成你，来向服务器发送信息，也可以伪装称为服务器，接受你发送的信息。那么怎么解决这个问题呢？")]),_._v(" "),t("h3",{attrs:{id:"认证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认证","aria-hidden":"true"}},[_._v("#")]),_._v(" 认证")]),_._v(" "),t("p",[_._v("如何确定你自己的唯一性呢？我们在上面的叙述过程中出现过公钥加密，私钥解密的这个概念。提到的私钥只有你一个人所有，能够辨别唯一性，所以我们可以把顺序调换一下，变成私钥加密，公钥解密。使用私钥再加上摘要算法，就能够实现数字签名，从而实现认证。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https12.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("到现在，综合使用对称加密、非对称加密和摘要算法，我们已经实现了加密、数据认证、认证，那么是不是就安全了呢？非也，这里还存在一个数字签名的认证问题。因为私钥是是自己的，公钥是谁都可以发布，所以必须发布经过认证的公钥，才能解决公钥的信任问题。")]),_._v(" "),t("p",[_._v("所以引入了 "),t("code",[_._v("CA")]),_._v("，"),t("code",[_._v("CA")]),_._v(" 的全称是 "),t("code",[_._v("Certificate Authority")]),_._v("，证书认证机构，你必须让 "),t("code",[_._v("CA")]),_._v(" 颁布具有认证过的公钥，才能解决公钥的信任问题。")]),_._v(" "),t("p",[_._v("全世界具有认证的 "),t("code",[_._v("CA")]),_._v(" 就几家，分别颁布了 "),t("code",[_._v("DV")]),_._v("、"),t("code",[_._v("OV")]),_._v("、"),t("code",[_._v("EV")]),_._v(" 三种，区别在于可信程度。"),t("code",[_._v("DV")]),_._v(" 是最低的，只是域名级别的可信，"),t("code",[_._v("EV")]),_._v(" 是最高的，经过了法律和审计的严格核查，可以证明网站拥有者的身份（在浏览器地址栏会显示出公司的名字，例如 "),t("code",[_._v("Apple")]),_._v("、"),t("code",[_._v("GitHub")]),_._v(" 的网站）。不同的信任等级的机构一起形成了层级关系。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https13.jpg",alt:"https"}})]),_._v(" "),t("p",[_._v("通常情况下，数字证书的申请人将生成由私钥和公钥以及"),t("code",[_._v("证书签名请求（CSR）")]),_._v("组成的密钥对。CSR是一个编码的文本文件，其中包含公钥和其他将包含在证书中的信息"),t("code",[_._v("（例如域名，组织，电子邮件地址等）")]),_._v("。密钥对和 CSR生成通常在将要安装证书的服务器上完成，并且 CSR 中包含的信息类型取决于证书的验证级别。与公钥不同，申请人的私钥是安全的，永远不要向 "),t("code",[_._v("CA")]),_._v("（或其他任何人）展示。")]),_._v(" "),t("p",[_._v("生成 "),t("code",[_._v("CSR")]),_._v(" 后，申请人将其发送给 "),t("code",[_._v("CA")]),_._v("，"),t("code",[_._v("CA")]),_._v(" 会验证其包含的信息是否正确，如果正确，则使用颁发的私钥对证书进行数字签名，然后将其发送给申请人。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https14.jpg",alt:"https"}})]),_._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("p",[_._v("本篇文章我们主要讲述了 HTTPS 为什么会出现 ，HTTPS 解决了 HTTP 的什么问题，HTTPS 和 HTTP 的关系是什么，TLS 和 SSL 是什么，TLS 和 SSL 解决了什么问题？如何实现一个真正安全的数据传输？")]),_._v(" "),t("h3",{attrs:{id:"https的工作流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#https的工作流程","aria-hidden":"true"}},[_._v("#")]),_._v(" Https的工作流程")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https15.png",alt:"https"}})]),_._v(" "),t("p",[_._v("可以看到工作流程，基本分为三个阶段：")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("认证服务器。浏览器内置一个受信任的CA机构列表，并保存了这些CA机构的证书。第一阶段服务器会提供经CA机构认证颁发的服务器证书，如果认证该服务器证书的CA机构，存在于浏览器的受信任CA机构列表中，并且服务器证书中的信息与当前正在访问的网站（域名等）一致，那么浏览器就认为服务端是可信的，并从服务器证书中取得服务器公钥，用于后续流程。否则，浏览器将提示用户，根据用户的选择，决定是否继续。当然，我们可以管理这个受信任CA机构列表，添加我们想要信任的CA机构，或者移除我们不信任的CA机构。")])]),_._v(" "),t("li",[t("p",[_._v("协商会话密钥。客户端在认证完服务器，获得服务器的公钥之后，利用该公钥与服务器进行加密通信，协商出两个会话密钥，分别是用于加密客户端往服务端发送数据的客户端会话密钥，用于加密服务端往客户端发送数据的服务端会话密钥。在已有服务器公钥，可以加密通讯的前提下，还要协商两个对称密钥的原因，是因为非对称加密相对复杂度更高，在数据传输过程中，使用对称加密，可以节省计算资源。另外，会话密钥是随机生成，每次协商都会有不一样的结果，所以安全性也比较高。")])]),_._v(" "),t("li",[t("p",[_._v("加密通讯。此时客户端服务器双方都有了本次通讯的会话密钥，之后传输的所有Http数据，都通过会话密钥加密。这样网路上的其它用户，将很难窃取和篡改客户端和服务端之间传输的数据，从而保证了数据的私密性和完整性。")])])]),_._v(" "),t("h3",{attrs:{id:"使用https的流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用https的流程","aria-hidden":"true"}},[_._v("#")]),_._v(" 使用Https的流程")]),_._v(" "),t("p",[_._v("如果你是一个服务器开发者，想使用Https来保护自己的服务和用户数据安全，你可以按照以下流程来操作。")]),_._v(" "),t("p",[t("img",{attrs:{src:"/images/https/https16.png",alt:"https"}})]),_._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",[_._v("本篇博文转载自"),t("a",{attrs:{href:"https://juejin.im/post/5e6c4458518825491b11e082",target:"_blank",rel:"noopener noreferrer"}},[_._v("《看完这篇 HTTPS，和面试官扯皮就没问题了》"),t("OutboundLink")],1),_._v("并加以修改")]),_._v(" "),t("p",[_._v("文章参考：\n"),t("a",{attrs:{href:"https://www.cnblogs.com/xinzhao/p/4949344.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("白话Https"),t("OutboundLink")],1)]),_._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/xybelieve1990/article/details/54913825",target:"_blank",rel:"noopener noreferrer"}},[_._v("公钥、密钥、SSL、会话密钥的简单解释"),t("OutboundLink")],1)]),_._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/sj349781478/article/details/85049221",target:"_blank",rel:"noopener noreferrer"}},[_._v("浏览器如何验证SSL证书"),t("OutboundLink")],1)]),_._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/qq_41342577/article/details/103781157",target:"_blank",rel:"noopener noreferrer"}},[_._v("客户端是如何验证https证书的"),t("OutboundLink")],1)])])])},[],!1,null,null,null);v.default=s.exports}}]);